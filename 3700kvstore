#!/usr/bin/env python3

import argparse, socket, time, json, select, random

BROADCAST = "FFFF"
TIMEOUT = .15
HEARTBEAT = TIMEOUT * .5  # how often heartbeats should be sent
LEADER_TIMEOUT = TIMEOUT * 2

TERM = 0
ENTRY = 1


class Replica:
    def __init__(self, port, id, others):
        self.port = port
        self.id = id
        self.others = others

        self.last_heartbeat = time.time()  # for the follower's this can be time since having heard
        self.timeout = TIMEOUT * (random.random() + 1)  # recalculate on each timeout
        self.last_consensus = time.time()

        self.currentTerm = 0
        self.leader = 'FFFF'  # start as unknown
        self.status = 'follower'

        self.votedFor = None
        self.votes = set()

        self.log = []  # pair <term, <key, value>> as defined in the constants
        self.data = {}  # the key, value dict that is the store
        self.lastApplied = -1
        self.pending = {}  # 'MID' : {'msg': msg, 'numVotes': set(votes), 'index': the index it is given in the log}

        self.commitIndex = -1  # the last know index to be committed to the leader's log (got consensus)
        self.matchIndex = {}  # id: max known index

        self.redirect_queue = []  # all the messages this replica has to redirect
        self.redirect_timeout = time.time()  # the time of the last redirection batch

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))

        # ("Replica %s starting up" % self.id, flush=True)
        hello = {"src": self.id, "dst": BROADCAST, "leader": BROADCAST, "type": "hello"}
        self.send(hello)

    # send the given message
    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), ('localhost', self.port))

    # send a message structured with the provided arguments
    def send_args(self, dst, type, MID, term, value):
        message = {"src": self.id, "dst": dst, "leader": self.leader,
                   "type": type}
        if MID is not None:
            message['MID'] = MID
        if term is not None:
            message['term'] = term
        if value is not None:
            message['value'] = value
        self.send(message)

    # send an append entries message with all the necessary args + provided
    def send_append(self, dst, MID, prevLogIndex, prevLogTerm, entries):
        message = {"src": self.id, "dst": BROADCAST if dst is None else dst, "leader": self.leader,
                   "type": 'AppendEntries', 'term': self.currentTerm,
                   'prevLogIndex': prevLogIndex, 'prevLogTerm': prevLogTerm,
                   'entries': entries, 'leaderCommit': self.lastApplied}
        if MID is not None:
            message['MID'] = MID
        self.send(message)

    # send the client a fail response to the given message
    def fail(self, msg):
        self.send_args(msg['src'], 'fail', msg['MID'], None, None)

    # send the client an ok response to the given message
    def ok(self, msg, value): # TODO try sending the key along with the value so we can see it in the error messages
        self.send_args(msg['src'], 'ok', msg['MID'], None, value)

    # send a redirect response to the given message
    def send_redirect(self, msg):
        self.send_args(msg['src'], 'redirect', msg['MID'], None, None)

    # considers if the replica needs to redirect the message, and does so if necessary
    def redirect(self, msg):
        if self.leader is None:
            self.fail(msg)
        if self.status != 'leader':
            self.redirect_queue.append(msg)
            return True
        return False

    # handles get requests for the leader
    def get_request(self, msg):
        contents = self.data.get(msg['key'])
        value = '' if contents is None else contents
        self.ok(msg, value)

    # handles put requests for the leader
    def put_request(self, msg):
        if msg['MID'] in self.pending:  # received duplicate
            return
        if self.status == 'leader':  # no duplicate
            entry = (self.currentTerm, (msg['key'], msg['value']))
            self.log.append(entry)
            # self.update_followers()
            self.pending[msg['MID']] = {'msg': msg, 'index': self.prevIndex()}

    # apply a put message to the data & ok the message, done post consensus
    def apply_put(self, msg):
        self.apply_log()
        self.commitIndex = self.lastApplied  # only called for the leader
        self.ok(msg, None)

    # apply the next log entry to the data
    def apply_log(self):
        if self.lastApplied + 1 < len(self.log):
            self.lastApplied += 1
            key, value = self.log[self.lastApplied][ENTRY]
            self.data[key] = value

    # returns the previous index of the log
    def prevIndex(self):
        return len(self.log) - 1

    # returns the previous term
    def prevTerm(self):
        return self.log[-1][TERM] if len(self.log) > 0 else 0

    # call for an election becoming the candidate
    def elect(self):
        self.currentTerm += 1
        self.status = 'candidate'
        self.votedFor = self.id
        self.votes = set()
        self.send({'src': self.id, 'dst': BROADCAST, 'leader': self.leader, 'type': 'candidacy',
                   'lastTerm': self.prevTerm(), 'lastIndex': self.prevIndex(), 'term': self.currentTerm})

    # decide whether to vote for a candidate
    def vote(self, msg):
        if msg['term'] < self.currentTerm:
            return  # False
        if self.votedFor is None or self.votedFor == msg['src']:
            if msg['lastTerm'] > self.prevTerm() or \
                    (msg['lastTerm'] == self.prevTerm() and msg['lastIndex'] >= self.prevIndex()):
                self.votedFor = msg['src']
                self.send_args(msg['src'], 'vote', None, self.currentTerm, self.prevIndex())
                self.last_heartbeat = time.time()
                return

    # consider an append request and ask for an induction if out of date
    def consider_append(self, msg):
        if len(msg['entries']) == 0:  # if it is a heartbeat
            if msg['leaderCommit'] >= len(self.log):
                self.send_args(self.leader, 'induce_me', msg.get('MID'), None, self.commitIndex)
            return
        prev_i = msg['prevLogIndex']
        if len(self.log) > prev_i + 1 and self.log[prev_i + 1:] == msg['entries']:
            self.send_args(self.leader, 'agree', msg.get('MID'), self.currentTerm, self.prevIndex())
            return  # already applied, probably duplicate message
        if prev_i == -1 \
                or (len(self.log) > msg['prevLogIndex']  # if index is in the log
                    and self.log[prev_i][TERM] == msg['prevLogTerm']):
            for i in range(len(self.log) - 1 - prev_i):
                self.log.pop(len(self.log) - 1)
            self.log.extend(msg['entries'])
            self.send_args(self.leader, 'agree', msg.get('MID'), self.currentTerm, self.prevIndex())
            if msg['leaderCommit'] > self.commitIndex:
                self.commitIndex = min(msg['leaderCommit'], self.prevIndex())
                while self.commitIndex > self.lastApplied:
                    self.apply_log()
        else:
            self.send_args(self.leader, 'induce_me', msg.get('MID'), None, self.commitIndex)

    # induces a follower that sent the given message, using the known matchIndex if possible
    def induce(self, msg):
        index = self.matchIndex.get(msg['src'])
        if index is None:
            index = msg['value']  # if it's an induce me request
        self.induce_from(msg.get('MID'), index, msg['src'])

    # Sends a round of appendEntry messages to all followers based on most recent matchIndex
    def update_followers(self):
        self.last_heartbeat = time.time()
        for follower in self.others:
            index = self.matchIndex.get(follower)  # send append from the earliest known index
            if index is None:
                index = max(len(self.log) - 50, 0)
            self.induce_from(None, index, follower)

    # Sends one or more appendEntry messages updating a follower starting from a given log index
    def induce_from(self, MID, index, dst):
        if index + 1 >= len(self.log):
            self.send_append(dst, MID, index, self.prevIndex(), [])  #  still need to send heartbeat
            return
        if len(self.log) - index < 51:
            self.send_append(dst, MID, index, self.log[index][TERM], self.log[index + 1:])
        else:
            self.send_append(dst, MID, index, self.log[index][TERM], self.log[index + 1:index + 51])
            self.induce_from(MID, index + 50, dst)

    # deals with a log of pending puts via redirection after a leader loses their status
    def resolve_log(self):
        for MID in self.pending.keys():
            msg = self.pending[MID]['msg']
            self.redirect(msg)
        self.pending = {}

    # determines the highest index that a majority of replicas have commited to their log
    def highest_consensus(self):
        indices = []
        for index in self.matchIndex.values():
            indices.append(index)
        indices.append(len(self.log) - 1)
        sorted(indices)
        if len(indices) > 2:
            return indices[-3]
        return self.commitIndex

    def apply_matched(self):
        highest_consensus = self.highest_consensus()

        # apply all log entries that have reached consensus
        while self.lastApplied < highest_consensus:
            self.apply_log()
        self.commitIndex = self.lastApplied
        # ok all pending messages that have received consensus
        done = set()
        for MID in self.pending.keys():
            entry = self.pending[MID]
            if entry['index'] <= self.commitIndex:
                self.ok(entry['msg'], None)
                done.add(MID)
        for MID in done:
            self.pending.pop(MID)
        if len(done) > 0:
            self.last_consensus = time.time()

    # handle messages received from the leader
    def leader_recv(self, msg):
        if msg['type'] == 'agree':
            # update matchIndex
            current = self.matchIndex.get(msg['src'])
            if current is None:
                current = -1
            self.matchIndex[msg['src']] = max(msg['value'], current)
            self.apply_matched()
        elif msg['type'] == 'induce_me':
            self.induce(msg)
        elif msg['type'] == 'vote' and msg['term'] == self.currentTerm:
            current = self.matchIndex.get(msg['src'])
            self.matchIndex[msg['src']] = msg['value'] if current is None else max(current, msg['value'])
            self.apply_matched()

    # handle when a candidate receives a message
    def candidate_recv(self, msg):
        if msg['type'] == 'vote' and msg['term'] == self.currentTerm:
            self.votes.add(msg['src'])
            self.matchIndex[msg['src']] = msg['value']
            if len(self.votes) >= len(self.others) / 2:
                self.status = 'leader'
                self.leader = self.id
                self.last_consensus = time.time()
                self.apply_matched()
                self.update_followers()  # alert others that you are the leader
                self.last_heartbeat = time.time()
                # the log is retained as it is still the leader
                # other leader things
        elif msg['type'] == 'AppendEntries':
            if msg['leader'] != self.leader and msg['term'] >= self.currentTerm:
                self.status = 'follower'
                self.leader = msg['leader']
                self.resolve_log()

    # handle messages received by a follower
    def follower_recv(self, msg):
        if msg['type'] == 'candidacy':
            self.vote(msg)
        elif msg['type'] == 'AppendEntries':
            if msg['leader'] != self.leader and msg['term'] >= self.currentTerm:
                self.leader = msg['leader']
                self.resolve_log()
            self.consider_append(msg)

    # trigger any interval based events for the leader
    def leader_heartbeat(self):
        if time.time() - self.last_heartbeat > HEARTBEAT:
            self.update_followers()

        # consensus has timed out, call a new election to stop
        if time.time() - self.last_consensus > LEADER_TIMEOUT:
            self.last_heartbeat = time.time()
            self.timeout = TIMEOUT * (random.random() + 1)
            self.elect()

    # keeps track of when a replica that is not the leader should call for an election
    def election_heartbeat(self):
        if self.status != 'leader' and \
                time.time() - self.last_heartbeat > self.timeout:
            self.last_heartbeat = time.time()
            self.timeout = TIMEOUT * (random.random() + 1)  # +1 for fewer leader tieouts 1-2 x timeout
            self.elect()
            return True
        return False

    def run(self):
        while True:
            ready = select.select([self.socket], [], [], .01)[0]
            if len(ready) == 1:
                data, addr = self.socket.recvfrom(65535)
                msg = json.loads(data.decode('utf-8'))

                term = msg.get('term')
                if term is not None and term > self.currentTerm:
                    self.currentTerm = term
                    self.votedFor = None
                    self.status = 'follower'

                if msg['src'] == self.leader:
                    self.last_heartbeat = time.time()

                if msg['dst'] != self.id and msg['dst'] != BROADCAST:
                    continue

                if msg['type'] == 'get':
                    if self.redirect(msg):
                        continue
                    self.get_request(msg)  # will have a MID and a key to be gotten
                elif msg['type'] == 'put':
                    if self.redirect(msg):
                        continue
                    self.put_request(msg)

                if self.status == 'leader':
                    self.leader_recv(msg)

                if self.status == 'candidate':
                    self.candidate_recv(msg)

                if self.status == 'follower':
                    self.follower_recv(msg)

            # back to running every tick
            if self.election_heartbeat():
                continue

            current_time = time.time()
            if current_time - self.redirect_timeout > TIMEOUT:  # minimize partition noise
                while len(self.redirect_queue) != 0:
                    self.send_redirect(self.redirect_queue.pop())
                self.redirect_timeout = current_time

            if self.status == 'leader':
                self.leader_heartbeat()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()